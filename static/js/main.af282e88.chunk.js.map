{"version":3,"sources":["Components/Recipe/Recipe.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["Recipe","title","calories","image","ingredients","className","map","ingredient","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","urlReq","a","fetch","response","json","data","hits","useEffect","getRecipes","console","log","onSubmit","e","preventDefault","type","value","onChange","target","recipe","label","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+RAkBeA,G,MAfA,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACtC,OACI,yBAAKC,UAAU,UACX,4BAAKJ,GACL,4BACKG,EAAYE,KAAI,SAACC,GAAD,OACb,4BAAKA,EAAWC,UAGxB,2BAAIN,GACJ,yBAAKG,UAAU,QAAQI,IAAKN,EAAOO,IAAKT,OCuCrCU,G,MAhDH,WACR,IADc,EAIgBC,mBAAS,IAJzB,mBAIPC,EAJO,KAIEC,EAJF,OAKcF,mBAAS,IALvB,mBAKPG,EALO,KAKCC,EALD,OAMYJ,mBAAS,WANrB,mBAMPK,EANO,KAMAC,EANA,KAQRC,EAAM,0CAAsCF,EAAtC,mBAPG,WAOH,oBANI,oCAFF,4CAed,8BAAAG,EAAA,sEAC2BC,MAAMF,GADjC,cACUG,EADV,gBAEuBA,EAASC,OAFhC,OAEUC,EAFV,OAGIV,EAAWU,EAAKC,MAHpB,4CAfc,sBA+Bd,OArBAC,qBAAU,YAVI,mCAWVC,GACAC,QAAQC,IAAI,SACb,CAACZ,IAmBA,yBAAKZ,UAAU,OACX,0BAAMA,UAAU,cAAcyB,SARtC,SAAmBC,GACfA,EAAEC,iBACFd,EAASH,GACTC,EAAU,MAMF,2BAAOiB,KAAK,OAAO5B,UAAU,aAAa6B,MAAOnB,EAAQoB,SAbrE,SAAsBJ,GAClBf,EAAUe,EAAEK,OAAOF,UAaX,4BAAQD,KAAK,SAAS5B,UAAU,iBAAhC,WAIJ,yBAAKA,UAAU,WACVQ,EAAQP,KAAI,SAAC+B,GAAD,OACT,kBAAC,EAAD,CAAQpC,MAAOoC,EAAOA,OAAOC,MAAOpC,SAAUmC,EAAOA,OAAOnC,SAAUC,MAAOkC,EAAOA,OAAOlC,MAAOC,YAAaiC,EAAOA,OAAOjC,YAAamC,IAAKF,EAAOA,OAAOC,eCjC7JE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.af282e88.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Recipe.css';\r\n\r\nconst Recipe = ({ title, calories, image, ingredients }) => {\r\n    return (\r\n        <div className=\"recipe\">\r\n            <h1>{title}</h1>\r\n            <ol>\r\n                {ingredients.map((ingredient) => (\r\n                    <li>{ingredient.text}</li>\r\n                ))}\r\n            </ol>\r\n            <p>{calories}</p>\r\n            <img className=\"image\" src={image} alt={title} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Recipe;\r\n","import React, { useEffect, useState } from 'react';\nimport Recipe from '../Recipe/Recipe';\nimport './App.css';\n\nconst App = () => {\n    const API_ID = '9e3163c4';\n    const API_KEY = '98010d2d06396a5ff6c48c3495b2b490';\n\n    const [recipes, setRecipes] = useState([]);\n    const [search, setSearch] = useState('');\n    const [query, setQuery] = useState('chicken');\n\n    const urlReq = `https://api.edamam.com/search?q=${query}&app_id=${API_ID}&app_key=${API_KEY}`;\n\n    useEffect(() => {\n        getRecipes();\n        console.log('asd');\n    }, [query]);\n\n    async function getRecipes() {\n        const response = await fetch(urlReq);\n        const data = await response.json();\n        setRecipes(data.hits);\n    }\n\n    function updateSearch(e) {\n        setSearch(e.target.value);\n    }\n\n    function getSearch(e) {\n        e.preventDefault();\n        setQuery(search);\n        setSearch('');\n    }\n\n    return (\n        <div className=\"App\">\n            <form className=\"search-form\" onSubmit={getSearch}>\n                <input type=\"text\" className=\"search-bar\" value={search} onChange={updateSearch} />\n                <button type=\"submit\" className=\"search-button\">\n                    Search\n                </button>\n            </form>\n            <div className=\"recipes\">\n                {recipes.map((recipe) => (\n                    <Recipe title={recipe.recipe.label} calories={recipe.recipe.calories} image={recipe.recipe.image} ingredients={recipe.recipe.ingredients} key={recipe.recipe.label} />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}